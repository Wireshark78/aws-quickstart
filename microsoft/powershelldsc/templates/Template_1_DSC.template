{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(000B) - This template deploys a Windows based web application stack and PowerShell DSC Pull Server infrastructure across two availability zones. Instances are bootstrapped both by CloudFormation and within Windows by pulling desired configurations from the DSC Pull Server.",
    "Parameters": {
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NATInstanceType": {
            "Description": "Amazon EC2 instance type for the NAT Instances",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.small",
                "t2.medium"
            ]
        },
        "WindowsInstanceType": {
            "Description": "Amazon EC2 instance type for the Windows Instances",
            "Type": "String",
            "Default": "m3.xlarge",
            "AllowedValues": [
                "m1.small",
                "m1.medium",
                "m1.large",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "c1.medium",
                "c1.xlarge"
            ]
        },
        "PullServerInstanceType": {
            "Description": "Amazon EC2 instance type for the PowerShell DSC Pull Servers",
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ]
        },
        "DomainDNSName": {
            "Description": "DNS Domain for the AD Domain (example.com)",
            "Type": "String",
            "Default": "example.com"
        },
        "DomainNetBiosName": {
            "Description": "Netbios name for the domain (EXAMPLE)",
            "Type": "String",
            "Default": "EXAMPLE"
        },
        "AdminPassword": {
            "Description": "Password for the Administrator user account",
            "Type": "String",
            "NoEcho": "true"
        },
        "PullServer1PrivateIp": {
            "Description": "Fixed private IP for the first DSC Pull server located in AZ1",
            "Type": "String",
            "Default": "10.0.0.15"
        },
        "PullServer2PrivateIp": {
            "Description": "Fixed private IP for the first DSC Pull server located in AZ2",
            "Type": "String",
            "Default": "10.0.64.15"
        },
        "ADServer1PrivateIp": {
            "Description": "Fixed private IP for the first Domain Controller located in AZ1",
            "Type": "String",
            "Default": "10.0.0.10"
        },
        "ADServer2PrivateIp": {
            "Description": "Fixed private IP for the Domain Controller located in AZ2",
            "Type": "String",
            "Default": "10.0.64.10"
        },
        "DMZ1CIDR": {
            "Description": "CIDR Block for the Public DMZ Subnet located in AZ1",
            "Type": "String",
            "Default": "10.0.32.0/20",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "DMZ2CIDR": {
            "Description": "CIDR Block for the Public DMZ Subnet located in AZ2",
            "Type": "String",
            "Default": "10.0.96.0/20",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "PrivateSubnet1CIDR": {
            "Description": "CIDR Block for Private Subnet 1 located in AZ1",
            "Type": "String",
            "Default": "10.0.0.0/19",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "PrivateSubnet2CIDR": {
            "Description": "CIDR Block for Private Subnet 2 located in AZ2",
            "Type": "String",
            "Default": "10.0.64.0/19",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "VPCCIDR": {
            "Description": "CIDR Block for the VPC",
            "Type": "String",
            "Default": "10.0.0.0/16",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AWSNAT": "amzn-ami-vpc-nat-hvm-2016.03.1.x86_64-ebs",
                "WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2016.05.11"
            },
            "ap-northeast-1": {
                "AWSNAT": "ami-5d170c33",
                "WS2012R2": "ami-447a9d25"
            },
            "ap-northeast-2": {
                "AWSNAT": "ami-0d32fa63",
                "WS2012R2": "ami-3e75bd50"
            },
            "ap-southeast-1": {
                "AWSNAT": "ami-4ddb0c2e",
                "WS2012R2": "ami-5bf72138"
            },
            "ap-southeast-2": {
                "AWSNAT": "ami-9094b9f3",
                "WS2012R2": "ami-4c6d422f"
            },
            "eu-central-1": {
                "AWSNAT": "ami-b2c321dd",
                "WS2012R2": "ami-827d90ed"
            },
            "eu-west-1": {
                "AWSNAT": "ami-a2971ed1",
                "WS2012R2": "ami-29eb7e5a"
            },
            "sa-east-1": {
                "AWSNAT": "ami-a28d04ce",
                "WS2012R2": "ami-588f0734"
            },
            "us-east-1": {
                "AWSNAT": "ami-bae80fd7",
                "WS2012R2": "ami-e0e00f8d"
            },
            "us-west-1": {
                "AWSNAT": "ami-3885fb58",
                "WS2012R2": "ami-b8c5bcd8"
            },
            "us-west-2": {
                "AWSNAT": "ami-d3f506b3",
                "WS2012R2": "ami-8db945ed"
            }
        }
    },
    "Resources": {
        "EC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "EC2RolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:DescribeLoadBalancers",
                                        "ec2:DescribeInstances",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2RoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2Role"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "DMZ1Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "DMZ1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Role",
                        "Value": "DMZ 1 Subnet"
                    }
                ]
            }
        },
        "DMZ2Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "DMZ2CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    },
                    {
                        "Key": "Role",
                        "Value": "DMZ 2 Subnet"
                    }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    },
                    {
                        "Key": "Role",
                        "Value": "Private Subnet 1"
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    },
                    {
                        "Key": "Role",
                        "Value": "Private Subnet 2"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "DMZRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "DMZ"
                    }
                ]
            }
        },
        "DMZRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "DMZ1SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1Subnet"
                },
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }
            }
        },
        "DMZ2SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2Subnet"
                },
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }
            }
        },
        "PrivateRouteTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "AZ1 Private"
                    }
                ]
            }
        },
        "PrivateRouteTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "AZ2 Private"
                    }
                ]
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NAT1"
                }
            }
        },
        "PrivateRoute2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NAT2"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable2"
                }
            }
        },
        "RdgwEIP1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "RDGW1"
                }
            }
        },
        "RdgwEIP2": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "RDGW2"
                }
            }
        },
        "NAT1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNAT"
                    ]
                },
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT1"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "NATSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "DMZ1Subnet"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SourceDestCheck": "false"
            }
        },
        "NAT2": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNAT"
                    ]
                },
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT2"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "NATSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "DMZ2Subnet"
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SourceDestCheck": "false"
            }
        },
        "Pull1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "NAT1",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapPullSvc",
                            "buildConfigs",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Pull1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Pull1",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\CreatePullServer.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/CreatePullServer.ps1"
                            },
                            "c:\\cfn\\scripts\\MasterConfig.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/MasterConfig.ps1"
                            },
                            "c:\\cfn\\scripts\\New-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/New-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            },
                            "c:\\cfn\\scripts\\IPHelper.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/IPHelper.psm1"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xPSDesiredStateConfiguration_2.0.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xPSDesiredStateConfiguration-3.0.0.1.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xNetworking_2.1.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xNetworking_2.1.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xComputerManagement_1.2.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xComputerManagement_1.2.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xActiveDirectory_2.0.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xActiveDirectory_2.0.zip"
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "Pull1WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "d-unzip-modules": {
                                "command": "powershell.exe -command \"Get-ChildItem 'C:\\Program Files\\WindowsPowerShell\\DscService\\Modules' *.zip | Foreach-Object { c:\\cfn\\scripts\\unzip-archive.ps1 -source $_.fullname -destination 'C:\\Program Files\\WindowsPowerShell\\Modules'}\"",
                                "waitAfterCompletion": "0"
                            },
                            "e-create-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\New-DSCPullServerCertificate.ps1 -Password ",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-rename-computer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName Pull1 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapPullSvc": {
                        "commands": {
                            "a-create-pullserver": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\CreatePullServer.ps1",
                                "waitAfterCompletion": "0"
                            },
                            "b-checksum-resources": {
                                "command": "powershell.exe -command \"Get-ChildItem 'C:\\Program Files\\WindowsPowerShell\\DscService\\Modules' *.zip | Foreach-Object { new-dscchecksum $_.fullname}\"",
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "buildConfigs": {
                        "commands": {
                            "a-build-checksum-mof": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\MasterConfig.ps1 -DomainDNSName ",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref": "DomainNetBiosName"
                                            },
                                            " -AdminPassword '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -ADServer1PrivateIp ",
                                            {
                                                "Ref": "ADServer1PrivateIp"
                                            },
                                            " -ADServer2PrivateIp ",
                                            {
                                                "Ref": "ADServer2PrivateIp"
                                            },
                                            " -PrivateSubnet1CIDR ",
                                            {
                                                "Ref": "PrivateSubnet1CIDR"
                                            },
                                            " -PrivateSubnet2CIDR ",
                                            {
                                                "Ref": "PrivateSubnet2CIDR"
                                            },
                                            " -DMZ1CIDR ",
                                            {
                                                "Ref": "DMZ1CIDR"
                                            },
                                            " -DMZ2CIDR ",
                                            {
                                                "Ref": "DMZ2CIDR"
                                            },
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-add-fw-exception": {
                                "command": "powershell.exe -command New-NetFirewallRule -DisplayName WinRM -Direction Inbound -Action Allow -LocalPort 5985 -Protocol tcp",
                                "waitAfterCompletion": "0"
                            },
                            "b-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "PullServerInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PULL1"
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "PullServerGroup"
                    },
                    {
                        "Ref": "DomainMemberSG"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "PrivateIpAddress": {
                    "Ref": "PullServer1PrivateIp"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Pull1",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Pull2": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "WEB2WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapPullSvc",
                            "buildConfigs",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Pull2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r Pull2",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\CreatePullServer.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/CreatePullServer.ps1"
                            },
                            "c:\\cfn\\scripts\\MasterConfig.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/MasterConfig.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Register-PullServer.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Register-PullServer.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            },
                            "c:\\cfn\\scripts\\IPHelper.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/IPHelper.psm1"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xPSDesiredStateConfiguration_2.0.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xPSDesiredStateConfiguration-3.0.0.1.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xNetworking_2.1.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xNetworking_2.1.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xComputerManagement_1.2.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xComputerManagement_1.2.zip"
                            },
                            "C:\\Program Files\\WindowsPowerShell\\DscService\\Modules\\xActiveDirectory_2.0.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/modules/xActiveDirectory_2.0.zip"
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "Pull2WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "d-create-folder": {
                                "command": "powershell.exe -command New-Item -ItemType Directory -Path c:\\inetpub\\wwwroot",
                                "waitAfterCompletion": "0"
                            },
                            "e-unzip-modules": {
                                "command": "powershell.exe -command \"Get-ChildItem 'C:\\Program Files\\WindowsPowerShell\\DscService\\Modules' *.zip | Foreach-Object { c:\\cfn\\scripts\\unzip-archive.ps1 -source $_.fullname -destination 'C:\\Program Files\\WindowsPowerShell\\Modules'}\"",
                                "waitAfterCompletion": "0"
                            },
                            "f-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            },
                                            " -InstanceName PULL2"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-rename-computer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName Pull2 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapPullSvc": {
                        "commands": {
                            "a-create-pullserver": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\CreatePullServer.ps1",
                                "waitAfterCompletion": "0"
                            },
                            "b-checksum-resources": {
                                "command": "powershell.exe -command \"Get-ChildItem 'C:\\Program Files\\WindowsPowerShell\\DscService\\Modules' *.zip | Foreach-Object { new-dscchecksum $_.fullname}\"",
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "buildConfigs": {
                        "commands": {
                            "a-build-checksum-mof": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\MasterConfig.ps1 -DomainDNSName ",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            " -DomainNetBiosName ",
                                            {
                                                "Ref": "DomainNetBiosName"
                                            },
                                            " -AdminPassword '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -ADServer1PrivateIp ",
                                            {
                                                "Ref": "ADServer1PrivateIp"
                                            },
                                            " -ADServer2PrivateIp ",
                                            {
                                                "Ref": "ADServer2PrivateIp"
                                            },
                                            " -PrivateSubnet1CIDR ",
                                            {
                                                "Ref": "PrivateSubnet1CIDR"
                                            },
                                            " -PrivateSubnet2CIDR ",
                                            {
                                                "Ref": "PrivateSubnet2CIDR"
                                            },
                                            " -DMZ1CIDR ",
                                            {
                                                "Ref": "DMZ1CIDR"
                                            },
                                            " -DMZ2CIDR ",
                                            {
                                                "Ref": "DMZ2CIDR"
                                            },
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-add-fw-exception": {
                                "command": "powershell.exe -command New-NetFirewallRule -DisplayName WinRM -Direction Inbound -Action Allow -LocalPort 5985 -Protocol tcp",
                                "waitAfterCompletion": "0"
                            },
                            "b-register-pull-server": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\Register-PullServer.ps1 -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "c-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "PullServerInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PULL2"
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "PullServerGroup"
                    },
                    {
                        "Ref": "DomainMemberSG"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "PrivateIpAddress": {
                    "Ref": "PullServer2PrivateIp"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r Pull2",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DC1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "Pull1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DC1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r DC1",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "DC1WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-rename-computer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName DC1 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance DC1",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DC1"
                    },
                    {
                        "Key": "guid",
                        "Value": "ef7cd161-8db3-42e3-bee0-78c262f94903"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "DomainController1SG"
                    },
                    {
                        "Ref": "TargetNode"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "PrivateIpAddress": {
                    "Ref": "ADServer1PrivateIp"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r DC1",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DC2": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "DC1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.DC2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r DC2",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "DC2WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-rename-computer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName DC2 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance DC2",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DC2"
                    },
                    {
                        "Key": "guid",
                        "Value": "481b2c9c-84f3-41c7-a9a6-492ed5c2ddd2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "100",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "DomainController2SG"
                    },
                    {
                        "Ref": "TargetNode"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "PrivateIpAddress": {
                    "Ref": "ADServer2PrivateIp"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r DC2",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "RDGW1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "DC1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RDGW1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r RDGW1",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "RDGW1WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-execute-powershell-script-RenameComputer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName RDGW1 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance RDGW1",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "DMZ1Subnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDGW1"
                    },
                    {
                        "Key": "guid",
                        "Value": "7e92b294-5ff5-462e-9ffc-a5951698b594"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "RDGWSecurityGroup"
                    },
                    {
                        "Ref": "DomainMemberSG"
                    },
                    {
                        "Ref": "TargetNode"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r RDGW1",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "RDGW2": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "DC1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RDGW2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r RDGW2",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "RDGW2WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-execute-powershell-script-RenameComputer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName RDGW2 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance RDGW2",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "DMZ2Subnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDGW2"
                    },
                    {
                        "Key": "guid",
                        "Value": "f1c34709-318f-4bb1-9a4e-7a1e47cfddfd"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "RDGWSecurityGroup"
                    },
                    {
                        "Ref": "DomainMemberSG"
                    },
                    {
                        "Ref": "TargetNode"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r RDGW2",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WEB1": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "DC1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.WEB1.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r WEB1",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "WEB1WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-execute-powershell-script-RenameComputer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName WEB1 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance WEB1",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WEB1"
                    },
                    {
                        "Key": "guid",
                        "Value": "ed0125c5-0d2b-4ca0-9354-ba261a9bc676"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "DomainMemberSG"
                    },
                    {
                        "Ref": "TargetNode"
                    },
                    {
                        "Ref": "IISWebGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r WEB1",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WEB2": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "DC1WaitCondition",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "setup",
                            "rename",
                            "bootstrapDSC",
                            "invokePull",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.WEB2.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c config -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r WEB2",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\Unzip-Archive.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/Unzip-Archive.ps1"
                            },
                            "c:\\cfn\\modules\\AWSQuickStart.zip": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/modules/AWSQuickStart.zip"
                            },
                            "c:\\cfn\\scripts\\CreateWaitHandle.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/utilities/latest/scripts/CreateWaitHandle.ps1"
                            },
                            "c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Invoke-PerformRequiredConfigurationChecks.ps1"
                            },
                            "c:\\cfn\\scripts\\SetPullMode.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/SetPullMode.ps1"
                            },
                            "c:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Reset-LocalAdminPassword.ps1"
                            },
                            "c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Install-DSCPullServerCertificate.ps1"
                            },
                            "c:\\cfn\\scripts\\Get-EC2InstanceGuid.psm1": {
                                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/powershelldsc/latest/scripts/Get-EC2InstanceGuid.psm1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-unpack-quickstart-module": {
                                "command": "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1 -Source c:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                                "waitAfterCompletion": "0"
                            },
                            "c-create-waithandle": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"c:\\cfn\\scripts\\CreateWaitHandle.ps1 -Handle '",
                                            {
                                                "Ref": "WEB2WaitHandle"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "rename": {
                        "commands": {
                            "a-reset-local-admin": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command C:\\cfn\\scripts\\Reset-LocalAdminPassword.ps1 -password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-execute-powershell-script-RenameComputer": {
                                "command": "powershell.exe -Command Rename-Computer -NewName WEB2 -Restart",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "bootstrapDSC": {
                        "commands": {
                            "a-install-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command c:\\cfn\\scripts\\Install-DSCPullServerCertificate.ps1 -Password '",
                                            {
                                                "Ref": "AdminPassword"
                                            },
                                            "' -PullServer1PrivateIp ",
                                            {
                                                "Ref": "PullServer1PrivateIp"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "b-set-dsc-pull-mode": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command c:\\cfn\\scripts\\SetPullMode.ps1 -Instance WEB2",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            " -VpcId ",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "invokePull": {
                        "commands": {
                            "a-pull-dsc-config": {
                                "command": "powershell.exe -Command c:\\cfn\\scripts\\Invoke-PerformRequiredConfigurationChecks.ps1",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "a-write-status": {
                                "command": "powershell.exe -command Write-AWSQuickStartStatus",
                                "waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "WS2012R2"
                    ]
                },
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WEB2"
                    },
                    {
                        "Key": "guid",
                        "Value": "17cab80f-778d-43fa-93ad-67feb2bb3d11"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "SecurityGroupIds": [
                    {
                        "Ref": "DomainMemberSG"
                    },
                    {
                        "Ref": "TargetNode"
                    },
                    {
                        "Ref": "IISWebGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2RoleInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -c config -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r WEB2",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DSCLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "DependsOn": [
                "Pull1"
            ],
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PrivateSubnet1"
                    },
                    {
                        "Ref": "PrivateSubnet2"
                    }
                ],
                "Scheme": "internal",
                "Instances": [
                    {
                        "Ref": "Pull1"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "8080",
                        "InstancePort": "8080",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBGroup"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:8080",
                    "HealthyThreshold": "10",
                    "UnhealthyThreshold": "2",
                    "Interval": "30",
                    "Timeout": "5"
                }
            }
        },
        "RDGW1WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "RDGW1",
            "Properties": {
                "Handle": {
                    "Ref": "RDGW1WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "RDGW1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "RDGW2WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "RDGW2",
            "Properties": {
                "Handle": {
                    "Ref": "RDGW2WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "RDGW2WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WEB1WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "WEB1",
            "Properties": {
                "Handle": {
                    "Ref": "WEB1WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "WEB1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WEB2WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "WEB2",
            "Properties": {
                "Handle": {
                    "Ref": "WEB2WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "WEB2WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "Pull1WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Pull1",
            "Properties": {
                "Handle": {
                    "Ref": "Pull1WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "Pull1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "Pull2WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Pull2",
            "Properties": {
                "Handle": {
                    "Ref": "Pull2WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "Pull2WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "DC1WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "DC1",
            "Properties": {
                "Handle": {
                    "Ref": "DC1WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "DC1WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "DC2WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "DC1",
            "Properties": {
                "Handle": {
                    "Ref": "DC2WaitHandle"
                },
                "Timeout": "3000"
            }
        },
        "DC2WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enables SSH access to NAT1 in AZ1 via port 22 and outbound internet access via private subnets",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "PrivateSubnet2CIDR"
                        }
                    }
                ]
            }
        },
        "RDGWSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable RDP access from the Internet",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ELBGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to HTTP via ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    }
                ]
            }
        },
        "IISWebGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable Access to IIS Web Servers",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    }
                ]
            }
        },
        "PullServerGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "ELBGroup",
            "Properties": {
                "GroupDescription": "Enable Access to DSC Pull Servers",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5985",
                        "ToPort": "5985",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "TargetNode"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "PullServer1PrivateIp"
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "PullServer2PrivateIp"
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "SourceSecurityGroupId": {
                            "Ref": "TargetNode"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9080",
                        "ToPort": "9080",
                        "SourceSecurityGroupId": {
                            "Ref": "TargetNode"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9080",
                        "ToPort": "9080",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBGroup"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    }
                ]
            }
        },
        "TargetNode": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "DSC Target Nodes Source Group",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "DomainController1SG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Domain Controller 1",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5985",
                        "ToPort": "5985",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "ADServer2PrivateIp"
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "123",
                        "ToPort": "123",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "135",
                        "ToPort": "135",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9389",
                        "ToPort": "9389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "138",
                        "ToPort": "138",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "636",
                        "ToPort": "636",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3268",
                        "ToPort": "3268",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3269",
                        "ToPort": "3269",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "DMZ1CIDR"
                        }
                    }
                ]
            }
        },
        "DomainController2SG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Domain Controller 2",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5985",
                        "ToPort": "5985",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "ADServer1PrivateIp"
                                    },
                                    "/32"
                                ]
                            ]
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "123",
                        "ToPort": "123",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "135",
                        "ToPort": "135",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9389",
                        "ToPort": "9389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "138",
                        "ToPort": "138",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "464",
                        "ToPort": "464",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "389",
                        "ToPort": "389",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "636",
                        "ToPort": "636",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3268",
                        "ToPort": "3268",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3269",
                        "ToPort": "3269",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "88",
                        "ToPort": "88",
                        "SourceSecurityGroupId": {
                            "Ref": "DomainMemberSG"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": {
                            "Ref": "DMZ1CIDR"
                        }
                    }
                ]
            }
        },
        "DomainMemberSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Domain Members",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "445",
                        "ToPort": "445",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "139",
                        "ToPort": "139",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "49152",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "PrivateSubnet1CIDR"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "RDGW1ElasticIP": {
            "Value": {
                "Ref": "RdgwEIP1"
            },
            "Description": "Elastic IP address of the first Remote Desktop Gateway in AZ1"
        },
        "RDGW2ElasticIP": {
            "Value": {
                "Ref": "RdgwEIP2"
            },
            "Description": "Elastic IP address of the Remote Desktop Gateway in AZ2"
        },
        "PullServerFQDN": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::GetAtt": [
                                "DSCLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "FQDN of the ELB for PowerShell DSC Pull Servers"
        }
    }
}